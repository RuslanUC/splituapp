#!/usr/bin/env python

# splituapp for Python2/3 by SuperR. @XDA
#
# For extracting img files from UPDATE.APP

# Based on the app_structure file in split_updata.pl by McSpoon

import os
import string
from pathlib import Path
from typing import BinaryIO


def read_int(file: BinaryIO) -> int:
    return int.from_bytes(file.read(4), "little")


def crc16(data: bytes) -> int:
    crc = 0xFFFF
    for byte in data:
        crc ^= byte
        for _ in range(8):
            if crc & 1:
                crc = (crc >> 1) ^ 0x8408
            else:
                crc >>= 1
    crc = ~crc & 0xFFFF
    return ((crc & 0xFF) << 8) | (crc >> 8)


def extract(source: str, flist: list[str], check_crc: bool = False):
    bytenum = 4
    outdir = Path("output")
    img_files = []

    try:
        os.makedirs(outdir)
    except:
        pass

    with open(source, "rb") as f:
        while True:
            i = f.read(bytenum)

            if not i:
                break
            elif i != b"\x55\xAA\x5A\xA5":
                continue

            headersize = read_int(f)
            f.seek(16, 1)
            filesize = read_int(f)
            f.seek(32, 1)
            filename = f.read(16)

            try:
                filename = str(filename.decode())
                filename = ''.join(f for f in filename if f in string.printable).lower()
            except:
                filename = ''

            f.seek(22, 1)
            crcdata = f.read(headersize - 98)

            if not flist or filename in flist:
                if filename in img_files:
                    filename = f"{filename}_2"

                print(f"Extracting {filename}.img ...")

                chunk = 4096 if check_crc else 10240
                checksum = b""

                try:
                    with open(outdir / f"{filename}.img", "wb") as o:
                        while filesize > 0:
                            if chunk > filesize:
                                chunk = filesize

                            data = f.read(chunk)
                            o.write(data)

                            if check_crc:
                                checksum += crc16(data).to_bytes(2, "big")
                            filesize -= chunk
                except:
                    print(f"ERROR: Failed to write {filename}.img\n")
                    return

                img_files.append(filename)

                if check_crc and crcdata != checksum:
                    print(f"ERROR: crc value for {filename}.img does not match\n")
            else:
                f.seek(filesize, 1)

            xbytes = bytenum - f.tell() % bytenum
            if xbytes < bytenum:
                f.seek(xbytes, 1)

    print("\nExtraction complete")


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description="Split UPDATE.APP file into img files")
    required = parser.add_argument_group("Required")
    required.add_argument("-f", "--filename", required=True, help="Path to update.app file")
    optional = parser.add_argument_group("Optional")
    optional.add_argument("-l", "--list", nargs="*", metavar=("img1", "img2"), help="List of img files to extract")
    optional.add_argument("-c", "--check-crc", action="store_true", default=False, help="Check crc checksum. Do only if you really need to check it since current crc implementation is very slow and i dont have the time or need to rewrite it.")
    args = parser.parse_args()

    extract(args.filename, args.list, args.check_crc)
